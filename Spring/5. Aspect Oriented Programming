AOP

Definition:
	-programming paradigm which complements Object-Oriented Programming (OOP) by separating concerns of a software application to improve modularization. The separation of concerns (SoC) aims for making a software easier to maintain by grouping features and behavior into manageable parts which all have a specific purpose and business to take care of.
	-OOP already allows for modularizing concerns into distinct methods, classes and packages. However, some concerns are difficult to place as they cross the boundaries of classes and even packages. One example for such a cross-cutting concern is security: Although the main purpose of a Forum package is to display and manage posts of a forum, it has to implement some kind of security to assert that only moderators can approve or delete posts. And many more packages need a similar functionality for protect the creation, deletion and update of records. AOP enables you to move the security (or any other) aspect into its own package and leave the other objects with clear responsibilities, probably not implementing any security themselves.
	-Aspect = class 
		applying logging aspect: apply class features to entities (such as other classes)
	
Purpose:
	prevents Code tangling
		ex: if logging and security code is needed for multiple entities, codes for logging/security are tangled in all the required classes 
	prevents Code scattering
		ex: updating the logging features requires updating change to all concerned classes 
	Inheritances don't work as well if there are multiple inheritance
	
Terminology: 
	Aspect: module of code for a cross-cutting concern (logging, security)
	Advice: what action is taken and when it should be applied
		Before Advice: run before the method 
		After Finally Advice: run after the method (finally)
		After Returning Advice: run after the method (success execution)
		After Throwing Advice: run after the method (if exception thrown)
	Join Point: when to apply code during program execution
	Pointcut: predicate expression for where advice should be applied 
		
VS AspectJ
	Advantages:
		-simpler to use
		-uses proxy pattern
		-can migrate to AspectJ when using @Aspect annotation 
	Disadvantages:	
		-only supports method-level join points 
		-can only apply aspects to beans crewated by Spring app context
		-Minor performance cost for aspect execution 
		
@BeforeAdvice
	-Most common uses: logging/security/transactions, audit logging(who/what/when/where) 
	1. Create target object: Account DAO
		@Component
		public class AccountDAO {
			public void addAccount(){
				sysout..
			}
	2. Create Spring Java Config class
		@Configuration //spring pure java configuration
		@EnableAspectJAutoProxy //spring AOP proxy support 
		@ComponentScan("com.allanudemy.aopdemo") //recurses to all subdirectories
		public class DemoConfig{
		
		}
	3. Create main app
		psvm{
			//read spring config java class
			AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(DemoConfig.class)
			
			//get the bean from spring container
			AccountDAO theDAO = context.getBean("accountDAO", AccountDAO.class);
			
			//call the business method
			theDAO.addAccount();
			
			context.close();
			
		}
	4. Create Aspect with @Before Advice
		@Aspect //indicate class as Aspect in network, listens to communications between aspects 
		@Component
		public class MyDemoLoggingAspect {
			@Before("execution(public void addAccount())") //match any calls with addAccount method on any class 
			public void beforeAddAccountAdvide(){
			//custom code s.a. logging, security ..
			
			...
			}
		
		}
		
Pointcut expressions:
	-must include fully qualified class names 
	-can use Advices in other classes, need to specify qualified name 
	execution(modifiers-pattern? return-type-pattern declaring-type-pattern? method-name-pattern(param-pattern) throws-pattern?) // ? is optional
			-modifiers-pattern: public protected private
			-return-type-pattern: can be a user deifined class ex: com.allanudemy.aopdemo.Account 
			-declaring-type-pattern + method-name-pattern : class name & method ex: com.allanudemy.aopdemo.dao.AccountDAO.addAccount(); ex: *addAccount();
			-param-pattern: 
		Wildcard: 
			pattern locations:
			@Before("execution(* com.allanudemy.aopdemo.*.*(..))")
				1st *: return type
				2nd *: any declaring class in that package 
				3rd *: any method in specified class of the 2nd * 
				(..) : any number of parameters 
				
			examples:
			@Before("execution(public void add*())") //add* := any method starting with 'add'
			@Before("execution(& processCreditCard*())") //any return type 
			@Before("execution(* add*(..))") //any number of any parameters
			@Before("execution(* add*(com.allanudemy.aopdemo.Account, ..))") //one account object parameter followed by any number of parameters 
				
	Examples: 
	@Before("execution(public void addAccount())")
	@Before("execution(* add*(com.allanudemy.aopdemo.Account))") //specify param type as an object class 
	@Before ("execution(* com.allanudemy.aopdemo.*.*(..))")
		-(..) := any param type
		
	@Before("execution(public void add*())") //wildcard for anymethod beginning with 'add'
	@Before("execution(public void com.allanudemy.aopdemo.dao.AccountDAO.addAccount())") //if want to specify class 
	
Pointcut declarations:
	1. Create pointcut Declaration
		@Pointcut("execution(* com.allanudemy.aopdemo.dao.*.*(..))")
		private void forDaoPackage(){}
		@Before("forDaoPackage()")
		private void beforeAddAccountAdvide(){...}
		
	2. Apply to rest 

	Combinations:	
			@Pointcut("execution(* com.allanudemy.aopdemo.dao.*.* (..))")
			private void forDaoPackage() {} //self defined method name
			
			//create pointcut for getter methods
			@Pointcut("execution(* com.allanudemy.aopdemo.dao.*.get*(..))")
			private void getter() {}
			
			//create pointcut for setter methods
			@Pointcut("execution(* com.allanudemy.aopdemo.dao.*.set*(..))")
			private void setter() {}

			//create pointcut: include package ... exclude getter/setter
			@Pointcut("forDaoPackage() && !(getter() || setter())")
			private void forDaoPackageNoGetterSetter() {}
		
Ordering aspects 
	-Place advices into separate aspects, control order on Aspects using the @Order annotation
	-Can't use @Order on methods -> can't order methods in same Aspect class 
	1. Refactor: Place advices in seperate aspects
	2. Add @Order on the differnet Aspects 
		ex: 
			@Aspect
			@Component 
			@Order(1) //lower numbers have higher priority, order can be negative, don't need to be consecutive 
			public classd MyCloudLogAspect

JoinPoints: read method arguments
	1. Access and display method signature (see which methods prompted the Aspect advice call)
		@Before("...")
		public void beforeAddAccountAdvice(JoinPoint theJoinPoint){
			//display the method signature
			MethodSignature methodSig = (MethodSignature) theJoinPoint.getSignature();
			
			System.out.println("Method: "+methodSig);
		}
	2. Access and display method arguments (see which objects are used while the advice is called, ex: specific Account object com.allanudemy.aopdemo.Account@68e965f5)
	//display methoe signature (from 1.)
	
		Object[] args = theJoinPoint.getArgs();
		
		//loop through args
		for(Object tempArg: args){
			System.out.println("tempArg);
		}

@AfterReturning (run after the *sucessful method execution)
	@AfterReturning(
		pointcut="execution(* com.,allanudemy.aopdemo.dao.AccountDAO.findAccounts(..))",
		returning="result")//parameter must be called result to be used in the afterReturningFindAccountsAdvice arguments
	public void afterReturningFindAccountsAdvice(Joinpoint theJoinPoint, List<Account> result){
		System.out.println("\n======> result is "+ result);
	}
	
	Modifying the Return value:
		if(!result.isEmpty()){
			Account tempAccount = result.get(0);
			tempAccount.setName("Daffy Duck"); //this will modify the result retrieved by the calling function 
		}

@AfterThrowing ï¼ˆrun after specific exception triggers)
	-helps log exception, perform auditing on the exception, notify devOps team via email or SMS, encapsulate functionality in AOP aspect for easy reuse
	@AfterThrowing("execution(* com.allanudemy.aopdemo.dao.AccountDAO.findAccounts(..))", throwing = "theExc) //specify where the exception is expected to be thrown
	public void afterThrowingFindAccountsAdvice(JoinPoint theJoinPoint, Throwable theExc){ //theExc specified in the @AfterThrowing parameters 
		System.out.println("Executing @AfterThrowing advice, the exception is "+theExc);
	}
	
@After
	-will run before @AfterThrowing and @AfterReturning advices 
	-does not have access to the exception or returning value
	@After("execution(* com.allanudemy.aopdemo.dao.AccountDAO.*(..))")
	public void afterFindAccountsAdvice(JoinPoint theJoinPoint) {
		System.out.println("Executing @After advice on method: "+theJoinPoint.getSignature().toShortString());
	}
@Around 
	-combination of @Before and @After 
	-logging/security/auditing
	-preprocessing and postprocessing data 
	-profiling code ex: measuring code run time 
	proceeding join point: new handle to execute target method 
		@Around("execution (* com.allanudemy.aopdemo.service.*.getFortune(..))")
		public Object aroundGetFortune(ProceedingJoinPoint theProceedingJoinPoint) throws Throwable {
			//print out method we're advising on
			System.out.println("\n=====>Executing @Around on method: "+theProceedingJoinPoint.getSignature().toShortString());
			
			//get begin timestamp
			long begin = System.currentTimeMillis();
			
			//execute method
			Object result = theProceedingJoinPoint.proceed();
			
			//get end timestamp
			long end = System.currentTimeMillis();
			
			//compute and display duration
			System.out.println("\tDuration: "+(end-begin)/1000.0+" seconds");
			
			return result;
		}
	
Print order resolution (due to different output streams)
	-create Logger object  called myLogger
	-replace System.out.println with myLogger.info
	
Logging exceptions:
	@Around("execution (* com.allanudemy.aopdemo.service.*.getFortuneErr(..))")
	public Object aroundGetFortune2 (ProceedingJoinPoint theProceedingJoinPoint) throws Throwable {
		Object result = null;
		
		try {
			//execute method
			result = theProceedingJoinPoint.proceed();
		}catch(Exception exc) {
			//log the exception
			myLogger.warning(exc.getMessage());
			
			//give the user custom message
			System.out.println("@Around advice aroundGetFortune2 threw execption: "+exc);
			result = "Major accident: modified by "+getClass();
		}
		return result;

	}
	
Add AOP Logging toi Spring MVC App - Real Time Project
	1. Add AspectJ jar file to web project
	2. Enable AspectJ auto proxy
			inside:	/web-customer-tracker-aop/WebContent/WEB-INF/spring-mvc-crud-demo-servlet.xml
				add line to beans: 	xmlns:aop="http://www.springframework.org/schema/aop" 
				add lines to bean xsi:schemaLocation=: 
					http://www.springframework.org/schema/aop
					http://www.springframework.org/schema/aop/spring-aop.xsd
				<!-- Add AspectgJ autoproxy support for AOP -->
				<aop:aspectj-autoproxy/>
		//place over java configuration file 
		@EnableAspectJAutoProxy 
		
	3. Create Aspect
		1. Add logging support
			
		2. Setup pointcut declarations
		3. Add @Before advice
			@Before("forAppFlow()")
			public void before(JoinPoint theJoinPoint) {
				//display method we are calling
				String theMethod = theJoinPoint.getSignature().toShortString();
				myLogger.info("\n======>> in @Before: calling method: "+theMethod);
				
				//display the arguements to the method
				
				//get the arguments
				Object [] args = theJoinPoint.getArgs();
				
				//loop through and display args
				for (Object obj:args) {
					myLogger.info("\t==> argument: "+ obj);
				}
				
			}
		4. Add @AfterReturning advice 
		
		
		
		