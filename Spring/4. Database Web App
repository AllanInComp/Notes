Database Web App Project 

Set Up 
	1. Set up database
		1. create user 
			CREATE USER 'springstudent'@'localhost' IDENTIFIED BY 'springstudent';

			GRANT ALL PRIVILEGES ON * . * TO 'springstudent'@'localhost';\
		2. create scheme 
			CREATE DATABASE  IF NOT EXISTS `web_customer_tracker` /*!40100 DEFAULT CHARACTER SET latin1 */;
			USE `web_customer_tracker`;
		3. create table `customer` 
		DROP TABLE IF EXISTS `customer`;
			/*!40101 SET @saved_cs_client     = @@character_set_client */;
			/*!40101 SET character_set_client = utf8 */;
			CREATE TABLE `customer` (
			  `id` int(11) NOT NULL AUTO_INCREMENT,
			  `first_name` varchar(45) DEFAULT NULL,
			  `last_name` varchar(45) DEFAULT NULL,
			  `email` varchar(45) DEFAULT NULL,
			  PRIMARY KEY (`id`)
			) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
			/*!40101 SET character_set_client = @saved_cs_client */;

	2. Test db connection
		1. create dynamic web project 
		2. add mysql-connector-java.jar to the WEB-INF directory
		3. create tester package in java resources src folde
			-create servlet object, uncheck doPost & Constructors from superclass
				-should have a servlet class extending HttpServlet, with doGet method 
				protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
					//setup connection variables 
					String user = "springstudent";
					String pass = "springstudent";
					String jdbcUrl=  "jdbc:mysql://localhost:3306/web_customer_tracker?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC";
					String driver = "com.mysql.jdbc.Driver";
					
					
					//get connection to database
					
					try {
						PrintWriter out = response.getWriter();
						out.println("Connecting to database: "+jdbcUrl);
						Class.forName(driver);
						Connection myConn = DriverManager.getConnection(jdbcUrl,user,pass);
						out.println("Connection successful");
						System.out.println("Success");
						
					}catch(Exception e) {
						e.printStackTrace();
						throw new ServletException(e);
					}
					
					response.getWriter().append("Served at: ").append(request.getContextPath());
				}
				
	3. Setup Dev Environment
		1. web.xml and spring config
			-welcome file can be set in web.xml (top down)
		2. JSTL libs
		3. Spring jar files
		4. Hibernate jar files
		
	4. Configuration for Spring + Hibernate 
		1. Define database dataSource / connection pool (determines # of connections to spring& hibernate) 
			-at spring-mvc-crud-demo-servlet.xml 
			
		2. Setup Hibernate session factory
			-scan package(s) for entity classes
		3. Setup Hibernate transaction manager
		4. Enable configuration of transactional annotations 
	5. Test spring mvc controller 

DAO: data access object 
	helper class for Spring controller to talk to the database via hibernate 
	to be injected into the controller to access database by query language
	
Spring & Hibernate
	@Transactional //annotation before method, allows session to automatically begin and end transactions 
	@Repository //special annotation for DAO implementations 
		-auto componenet scanner (like @Component), allows to scan all DAO implementation class 
	
List Customers
	1. Create Customer.java
		@Entity
		@Table(name="customer")
		public class Customer{...}
	2. Create CustomerDAO.java (& CustomerDAOImple.java)
		-import org.hibernate.query.Query to avoid deprecation
		@Repository
		public class CustomerDAOImpl implements CustomerDAO {
			@Autowired
			private SessionFactory sessionFactory;
			
			@Override
			public List<Customer> getCustomers() {
				//get current hibernate session
					//session is autowired into this DAO class via @Autowired
				Session currentSession = sessionFactory.getCurrentSession();
				
				//create query
				Query<Customer> theQuery = currentSession.createQuery("from Customer",Customer.class);
				
				//execute query and get result list 
				List<Customer> customers = theQuery.getResultList();
				
				//return the results (customers that we retrieved)
				return customers;
			}

		}
	3. Create CustomerController.java
		-add CustomerDAO object as a field for the controller, use @Autowired to directly link 
		-get List of customers by using customerDAO.getCustomers();
		-add the list as an attribute to the model to be used by the JSP pages 
		
	4. Create JSP page: list-customers.jsp
		-for loop <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
			<c:forEach var="tempCustomer" items="${customers}">
				<tr>
					<td> ${tempCustomer.firstName}</td>
					<td> ${tempCustomer.lastName}</td>
					<td> ${tempCustomer.email}</td>
				</tr>
			</c:forEach>
	
CSS formatting/styling
	1. Place CSS in 'resources' directory //random directory name
	2. Configure Spring to serve up 'resources' directory 
		-resources directory must be under WebContent folder
		<mvc:resources location="/resources" mapping = "/resources/**"/>
			-location: physical directory name
			-mapping: url mapping, ** to recurse to subdirectories
	3. Reference CSS in JSP header
		<link type = "text/css" rel="stylesheet" href="${pageContext.request.contextPath}/resources/css/style.css "/>

Getmapping and Postmapping annotations
	-both handles all HTTP methods
	@RequestMapping(path="/processForm",method=RequestMethod.GET) //mapping only handles GET method, all other http requests will be rejected
	public String processForm(...){...}
		-alternative: method only handles get methods 
			@GetMapping("/processForm")
			public String processForm(...){...}
	get: good for debugging, bookmark or email url, limitation on data length
	post: can't bookmark or email url, can also send binary data 
		
Service Layer:
	-between Controller and DAO, part of Service Facade design Pattern
	-interface and implementation 
	-contains @Transactional annotation in its methods, replacing those in DAO 
	public interface CustomerService
	
	
Add Customer
	1. Update list-customer.jsp
		New "Add customer" button
			<input type="button" value = "Add Customer" onclick="window.location.href='showFormForAdd'; return false;" class ="add-button"/>
	2. Create model attribute to bind form data in the showFormForAdd mapping method in Spring 
		Customer theCustomer = new Customer();
		theModel.addAttribute("customer",theCustomer);
	3. Create HTML form for customer
		Configure customer-form.jsp
			<form:form action="saveCustomer" modelAttribute="customer" method="POST">
	4. Process form data	
		Controller -> Service -> DAO -> Database
		Controller:
			@PostMapping("/saveCustomer")
			public String saveCustomer(@ModelAttribute("customer") Customer theCustomer) {
				
				return "redirect:/customer/list";
			}
		ServiceImpl:
			@Transactional
			@Override 
			public void saveCustomer(Customer theCustomer){
				sessionDAO.saveCustomer(theCustomer);
			}
		CustomerDAOImpl:
			@Override
			public void saveCustomer(Customer theCustomer) {
				sessionFactory.getCurrentSession().save(theCustomer);
				
			}
	
Updating Customer:	
	prepopulating the update form:
		-uses the same customer-form, retrieves customer model in database using customer id from the update button 
		list-customer.jsp:
			-inside for loop for each customer 
			<c:url var = "updateLink" value="/customer/showFormForUpdate">
						<c:param name="customerId" value="${tempCustomer12.id}"/>
						
			<td> <a href = "${updateLink}">Update</a>


	customer-form.jsp:
		<form:hidden path="id"/> <!-- this line is very important, tracks which customer to form the operation on -->
		

	CustomerDAOImpl:
		currentSession.saveOrUpdate(theCustomer);//instead of currentSession.save(theCustomer);

