Spring Security

Overview:
	Defines a framework for security
	Users Servlet filters to pre-process/post-process web requests
		-can route web requets based on security logic
	Web Browser -> Spring Security Filters(with configuration) -> Protected Web Resource 
	Authentication: user id and password stored in app/db
	Authorization： user has authorized role 
	
Login forms:
	HTTP login: built in dialog 
	Spring default login form: 
	Custom form: 

Development process:
	1. Add maven dependencies for Spring mvc web app 
		-not using web.xml, use <plugin> maven-war-plugin instead specified in pom 
		-for spring security, need Spring security web + spring security config 
	2. Create Spring App configuration　@Configuration
		@Configuration 
		@EnableWebMvc : add support for conversion, formatting and validation support, processing of Controller classes 
		@ComponentScan(basePackages="com.allanudemy.springsecurity.demo")
		public class DemoAppConfig{
			//servlet xml substitute
			//define a bean for view resolver, allows setting for connection between view pages and controller mappings 
			@Bean
			public ViewResolver viewResolver(){
				InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
				viewResolver.setPrevix("/WEB-INF/view/")
				viewResolver.setSuffix(".jsp")
				
				return viewResolver;
			}
		}
	3. Create Spring Dispatcher Servlet Initializer
		//web.xml substitute 
		public class MySpringMvcDispatcherServletInitializer extends AbstractAnnotationConfigDispatcherServletInitializer{
			@Override
			protected Class<?>[] getRootConfigClasses(){
				return null;
			}
			
			//mapping to configuration class (instead of the servlet.xml) 
			@Override
			protected Class<?> getServletConfigClasses(){
				return new Class[] {DemoAppconfig.class}; //points to the @Configuration class in 2.
			}
			
			//servlet mapping to dispatcher
			@Override
			protected String[] getServletMappigs(){
				return nrew String[] {"/"};
			
			}
		}
		
	4. Develop Spring controller @Controller
		@Controller
		public class DemoController{
			@GetMapping("/")
			public String showHome(){
				return "home";
			}
		}
		
	5. Develop JSP view page 
	
	6. Setup Spring Security
		1. Create a class that extends AbstractSecurityWebApplicationInitializer
			public class SecurityWebApplicationInitializer extends AbstractSecurityWebApplicationInitializer {
			}
		
		2. Create Spring Security Configuration & 3. Add users,passwords and roles to the Security Config class 
		@Configuration
		@EnableWebSecurity
		public class DemoSecurityConfig extends WebSecurityConfigurerAdapter{
			@Override
			protected void configure(AuthenticationManagerBuilder auth) throws Exception{
				UserBuilder users = User.withDefaultPasswordEncoder();
		
				auth.inMemoryAuthentication()
					.withUser(users.username("john").password("test123").roles("EMPLOYEE"))
					.withUser(users.username("mary").password("test123").roles("MANAGER"))
					.withUser(users.username("allan").password("test123").roles("ADMIN"));
					
			}
		}
		
	
Java Configuration @Configuration
	Allows separation of concerns
	
Custom login form
	1. Modify Spring Security Configuration class (DemoSecurityConfig) to reference custom login form 
		/**
		Configure security of web paths 
		*/
		@Override
		protected void configure(HttpSecurity http) throws Exception{
			http.authorizeRequests()   //Restrict access based on the HttpServletRequest
				.anyRequest().authenticated() //Any request to the app must be authenticated (logged in)
				.and()
				.formLogin()//customizing the form login process 
				.loginPage("/showMyLoginPage") //show custom form at the request mapping ("showMyLoginPage")
				.loginProcessingUrl("/authenticateTheUser") //login form posts data to this URL to process data (authorize), no controller request mapping required for this.
				.permitAll() //everyone sees the login page
				.and()
				.logout().permitAll();
		}
	
	2. Develop a Controller to show the custom login form 
		@Controller 
		public class LoginController {
			@GetMapping("/showMyLoginPage")
			public String showMyLoginPage(){
				return "plain-login";
			}
		}
	
	3. Create custom login form (.jsp file)
		<%@taglib prefix="form" uri="http://springframework.org/tags/form" %>
		-html, css
		-spring mvc form tag (form:form automatically implements spring security functions)
		<form:form action="${pageContext.request.contextPath}/authenticateTheUser" method="POST">
			<p>
				User name: <input type="name" text="username"/>
			</p>
			<p>
				Password: <input type="password" text="password"/>
			</p>
			
			<input type="submit" value="login"/>
			
		</form:form>
		
		-creating custom error message (for failed logins)
			once a login error occurs, url becomes: *original login url*?error.
			can use JSTL 
			<%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" %>
			<form:form>
				....
				<c:if test=${param.error !=null}">
					<i>Custome message: you have entered an invalid username/password</i>
				</c:if>
			</form:form>
	
	4. Create Logout button
		-Spring Security automatically links the logout link to login page, appends ?logout 
		<form:form action="${pageContext.request.contextPath}/logout" method="POST">
			<input type="submit" value="Logout"/>
		</form:form>

BootStrap Login Form 
	1. Add Spring mvc form tags 
	
	2. Update form to point to login processing URL 
	
	3. Verify form fields for username and password 
	
	4. point Controller to new Login form
	
Cross Site Request Forgery (CSRF)
	Spring Security protects against CSRF by default
	CSRF: security attack that a website forces user to trigger web application 
	Manually add CSRF token
		<form action="..." method="POST">
			<input type="hidden"
				name="${_csrf.parameterName}"
				value="${_csrf.token}"/>
		</form>
	<form:form> automatically adds csrf token
	
User Roles
	Spring Security uses JSP custom tags for roles specification 
	1. POM file Spring Security JSP tag library 
		Maven: spring-security-taglibs
	2. JSP page Spring Security JSP tag library 
		<%@ taglib prefix="security" uri="http://www.springframework.org/security/tags" %>  
	3. Display User id and User role
		<p>
			User: <security:authentication property="principal.username"/>
			<br><br>
			Role(s): <security:authentication property="principal.authorities"/>
		</p>

Restrict Access based on roles 
	1. Create Supporting Controller code and View Pages 
		@GetMapping("/leaders")
		public String showLeaders() {
			return "leaders";
		}
		
	2. Update user roles 
		add multiple roles for one employee 
		
	3. Restrict access to roles 
		http.authorizeRequests()
		//.antMatchers(<<add path to match on>>).hasAnyRole(<<list of authorized roles>>)
		.antMatchers("/").hasAnyRole("EMPLOYEE"); 
		.antMatchers("/leaders/**").hasAnyRole("MANAGER"); //leaders and all sub-directories (**) 
		.antMatchers("/systems/**").hasAnyRole("ADMIN"); //leaders and all sub-directories (**) 
	
	4. Custom access denied page 
		-Securit Config Class, http config override: 
		.and()
		.exceptionHandling().accessDeniedPage("/access-denied");
	
	5. Display content based on roles (limit visibility)
		surround limited content by <security:authorize access="hasRole('*specific role*')"> *content* </...>

Add JDBC Database (mySQL)
	1. Develop SQL script to set up database tables
		CREATE TABLE 'authorities'
		
	2. Add database support to Maven 
		MySQL connector 
		C3PO (db connection tool)
	3. Create JDBC properties file
		mapping to database from java 
		/spring-security-demo-jdbc-plaintext/src/main/resources/persistence-mysql.properties:
			#
			# JDBC connection properties
			#
			jdbc.driver=com.mysql.jdbc.Driver
			jdbc.url=jdbc:mysql://localhost:3306/spring_security_demo_plaintext?useSSL=false
			jdbc.user=springstudent
			jdbc.password=springstudent

			#
			# Connection pool properties
			#
			connection.pool.initialPoolSize=5
			connection.pool.minPoolSize=5
			connection.pool.maxPoolSize=20
			connection.pool.maxIdleTime=3000
	4. Define DataSource in Spring Configuration
		@Configuration
		@EnableWebMvc
		@ComponentScan (basePackages = "com.allanudemy.springsecurity.demo")
		@PropertySource("classpath:persistence-mysql.properties")
		public class DemoAppConfig {
			@Autowired
			private Environment env; //hold data read from properties files 
			
			private Logger logger = Logger.getLogger(getClass().getName());
			
			@Bean 
			public DataSource securityDataSource(){
				//create connection pool
				ComboPooledDataSource securityDataSource = new ComboPooledDataSource();
				
				//set jdbc driver
				try{
					securityDataSource.setDriverClass(env.getProperty("jdbc.driver"));//reads db configs from the jdbc properties file 
				}catch(PropertyVetoException exc)}
					throw new RuntimeException(exc);
				}
				//log the url and the user 
				logger.info(">>> jdbc.url="+env.getProperty("jdbc.url"));
				logger.info(">>> jdbc.user="+env.getProperty("jdbc.user"));
				
				//set database connection props
				securityDataSource.setJdbcUrl(env.getProperty("jdbc.url");
				securityDataSource.setUser(env.getProperty("jdbc.user");
				securityDataSource.setPassword(env.getProperty("jdbc.password");
				
				//set connection pool props
				securityDataSource.setInitialPoolSize(Integer.parseInt(env.getProperty("connection.pool.initialPoolSize")));
				securityDataSource.setMinPoolSize(Integer.parseInt(env.getProperty("connection.pool.minPoolSize")));
				securityDataSource.setMaxPoolSize(Integer.parseInt(env.getProperty("connection.pool.maxPoolSize")));
				securityDataSource.setMaxIdleTime(Integer.parseInt(env.getProperty("connection.pool.maxIdleTime")));

				
				return securityDataSource;
			}
		}
		
	5. Update Spring Security Configuration to user JDBC 
		@Configuration
		@EnableWebSecurity
		public class DemoSecurityConfig extends WebSecurityConfigurerAdapter {
			//inject the data source from DemoAppConfig bean
			@Autowired
			private DataSource securityDataSource; 
			
			@Override
			protected void configure(AuthenticationManagerBuilder auth) throws Exception{
				//reads users from the database
				auth.jdbcAuthentication().dataSource(securityDataSource); //tell spring security to use jdbc authentication with our data source 
			}
			
		}
		if multiple context path, search Server Project => Contexts => Resolve path conflicts 