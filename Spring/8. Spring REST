Spring REST 

Overview:
	REST: REpresentational State Transfer (communication between applications)
		-language independent, either client or server 
		-data format: XML and JSON (most popular)
			JSON: collection of name value pairs in the form of JavaScript Object Notation
			
JSON
	Just plain text 
	Language indepenedent, not just for javascript
	Example:	
		{
			"id":14,
			"firstName":"Mario",
			"lastName":"Rossi",
			"active":true,
			"address":{
				"street":"100 main St",
				.......
			}
			"languages":["Java","C#"]
		}
		values: number, String, booleans, nested JSON object, array, null

JSON Data Binding: Convert JSON data to Java POJO (or reverse)
	-also known as mapping, serializaiton/deserialization, mashalling/demarshalling
	Spring uses Jackson Project to handle JSON data binding 
		-com.fasterxml.jackson.databind 
		or use maven 
			<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>2.10.2</version>
			</dependency>
	Example:
		JSON:	
			{
				"id":14,
				"firstName":"Mario",
				"lastName":"Rossi",
				"active":true
			}
		Java:
			public class Student{
				int id;
				String firstName;
				String lastName;
				boolean active;
				
				*getters and setters*
			}
		Jackson calls setter methods automatically to databind JSON file to Java POJO 
	
	JSON to Java POJO (and reverse) coding:
		public static void main(String []args){
			//create object mapper 
			ObjectMapper mapper = new ObjectMapper();
			
			//read JSON from file, parameter names must match between JSON and POJO 
			Student myStudent = mapper.readValue(new File("data/sample.json),Student.class);
			
			//write JSON to output file 
			mapper.enable(SerializationFeature.INDENT_OUTPUT); //configure mapper 
			mapper.writeValue(new File("data/output.json"),myStudent);
		}
	If new property is added to JSON, and Java is not aware:
		add specific notation to POJO class 
		@JsonIgnoreProperties(ignoreUnknown=true)
		public class Student {...}
		
REST over HTTP
	leverage HTTP for CRUD operations 
	HTTP response code ranges:
		100-199: Informational
		200-399: Successful
		300-399: Redirection
		400-499: Client error
		500-599: Server error 
	MIME: Multipurpose Internet Mail-Extension, to be processed by client 
		Basic Syntax: type/sub-type 
			ex: text/html, text/plain, application/json, application/xml 
	Client tool: 
		Postman
		http://jsontest.com/ : provides backend REST services to test against 
	
Creating REST Controller
	-The job of @Controller is to create a Map of model object and find a view but @RestController simply return the object and object data is directly written into HTTP response as JSON or XML.

	Overview:
		1. Create REST Controller 
		@RestController
		@RequestMapping("/test)
		public class DemoRestController{
			//access the REST endpoint at /test/hello 
			@GetMapping("/hello")
			public String sayHello(){
				return "Hello World!";
			{
		}
		2. Test with postman or url 
		
	Development Process:
		Project: spring-rest-demo 
		1. Add Maven Dependency for Spring mvc and Jackson 
			
		2. Add code for all java config: @Configuration
				@Configuration
				@EnableWebMvc
				@ComponentScan(basePackage="com.allanudemy.springdemo")
				public class DemoAppConfig{
				
				}
			
		3. Add code for all java config: Servlet initializer 
			//use autoextend to find AbstractAnnotationConfigDispatcherServletInitializer quickly
			public class MySpringMvcDispatcherServletInitializer extends AbstractAnnotationConfigDispatcherServletInitializer{
				@Override ... 
			
			}
		4. Create Spring REST Service using @RestController
		
Retrieve POJOs as JSON 
	REST client -> REST Service (return a list of students as REST json)
	
	1. Make student POJO class 
		public Student(int id, String firstName, String lastName, boolean active)
	2. Create REST controller (with Jackson)
		@RestController
		@RequestMapping("api")
		public class StudentRestController {
			//define endpoint for "/students" - return list of students
			//called only once when the data is constructed
			@PostConstruct
			public void loadData() {
				List<Student> theStudents = new ArrayList<>();
				theStudents.add(new Student(1, "Susan","Boyle",true));
				theStudents.add(new Student(2, "Manik","Daree",true));
				theStudents.add(new Student(3, "Abran","Link",true));
				theStudents.add(new Student(4, "Trump","Orange",false));
			}
			
			@GetMapping("/students")
			public List<Student> getStudents(){
		
				return theStudents;
			}
		}
	3. Retrieve JSON file via url or Postman
		-sometimes returned data from url is incomplete, add '?' add the end of the url to solve caching bug
			
	Path Variables
		Allows specific object retrieval from REST service 
		/api/studnets/{studentId}
		
		@GetMapping("students/{studentId}")
		public Student getStudent (@PathVariable int studentId) {
			
			return theStudents.get(studentId-1);
		}