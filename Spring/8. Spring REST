Spring REST 

Overview:
	REST: REpresentational State Transfer (communication between applications)
		-language independent, either client or server 
		-data format: XML and JSON (most popular)
			JSON: collection of name value pairs in the form of JavaScript Object Notation
			
JSON
	Just plain text 
	Language indepenedent, not just for javascript
	Example:	
		{
			"id":14,
			"firstName":"Mario",
			"lastName":"Rossi",
			"active":true,
			"address":{
				"street":"100 main St",
				.......
			}
			"languages":["Java","C#"]
		}
		values: number, String, booleans, nested JSON object, array, null

JSON Data Binding: Convert JSON data to Java POJO (or reverse)
	-also known as mapping, serializaiton/deserialization, mashalling/demarshalling
	Spring uses Jackson Project to handle JSON data binding 
		-com.fasterxml.jackson.databind 
		or use maven 
			<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>2.10.2</version>
			</dependency>
	Example:
		JSON:	
			{
				"id":14,
				"firstName":"Mario",
				"lastName":"Rossi",
				"active":true
			}
		Java:
			public class Student{
				int id;
				String firstName;
				String lastName;
				boolean active;
				
				*getters and setters*
			}
		Jackson calls setter methods automatically to databind JSON file to Java POJO 
	
	JSON to Java POJO (and reverse) coding:
		public static void main(String []args){
			//create object mapper 
			ObjectMapper mapper = new ObjectMapper();
			
			//read JSON from file, parameter names must match between JSON and POJO 
			Student myStudent = mapper.readValue(new File("data/sample.json),Student.class);
			
			//write JSON to output file 
			mapper.enable(SerializationFeature.INDENT_OUTPUT); //configure mapper 
			mapper.writeValue(new File("data/output.json"),myStudent);
		}
	If new property is added to JSON, and Java is not aware:
		add specific notation to POJO class 
		@JsonIgnoreProperties(ignoreUnknown=true)
		public class Student {...}
		
REST over HTTP
	leverage HTTP for CRUD operations 
	HTTP response code ranges:
		100-199: Informational
		200-399: Successful
		300-399: Redirection
		400-499: Client error
		500-599: Server error 
	MIME: Multipurpose Internet Mail-Extension, to be processed by client 
		Basic Syntax: type/sub-type 
			ex: text/html, text/plain, application/json, application/xml 
	Client tool: 
		Postman
		http://jsontest.com/ : provides backend REST services to test against 
	
Creating REST Controller
	-The job of @Controller is to create a Map of model object and find a view but @RestController simply return the object and object data is directly written into HTTP response as JSON or XML.

	Overview:
		1. Create REST Controller 
		@RestController
		@RequestMapping("/test)
		public class DemoRestController{
			//access the REST endpoint at /test/hello 
			@GetMapping("/hello")
			public String sayHello(){
				return "Hello World!";
			{
		}
		2. Test with postman or url 
		
	Development Process:
		Project: spring-rest-demo 
		1. Add Maven Dependency for Spring mvc and Jackson 
			
		2. Add code for all java config: @Configuration
				@Configuration
				@EnableWebMvc
				@ComponentScan(basePackage="com.allanudemy.springdemo")
				public class DemoAppConfig{
				
				}
			
		3. Add code for all java config: Servlet initializer 
			//use autoextend to find AbstractAnnotationConfigDispatcherServletInitializer quickly
			public class MySpringMvcDispatcherServletInitializer extends AbstractAnnotationConfigDispatcherServletInitializer{
				@Override ... 
			
			}
		4. Create Spring REST Service using @RestController
		
Retrieve POJOs as JSON 
	REST client -> REST Service (return a list of students as REST json)
	
	1. Make student POJO class 
		public Student(int id, String firstName, String lastName, boolean active)
	2. Create REST controller (with Jackson)
		@RestController
		@RequestMapping("api")
		public class StudentRestController {
			//define endpoint for "/students" - return list of students
			//called only once when the data is constructed
			@PostConstruct
			public void loadData() {
				List<Student> theStudents = new ArrayList<>();
				theStudents.add(new Student(1, "Susan","Boyle",true));
				theStudents.add(new Student(2, "Manik","Daree",true));
				theStudents.add(new Student(3, "Abran","Link",true));
				theStudents.add(new Student(4, "Trump","Orange",false));
			}
			
			@GetMapping("/students")
			public List<Student> getStudents(){
		
				return theStudents;
			}
		}
	3. Retrieve JSON file via url or Postman
		-sometimes returned data from url is incomplete, add '?' add the end of the url to solve caching bug
			
	Path Variables
		Allows specific object retrieval from REST service 
		/api/studnets/{studentId}
		
		@GetMapping("students/{studentId}")
		public Student getStudent (@PathVariable int studentId) {
			
			return theStudents.get(studentId-1);
		}
		
Exception Handling 
	-Handle exception and return error as JSON
		1. REST client -> trigger exception (/api/students/999)
		2. REST service -> Throw exception -> Exception Handler -> send error message as JSON 
	Process	
		1. Create custom error response class
			-will be sent back to client as JSON 
			-POJO class
			public class StudentErrorResponse{
				private int status;
				private String message;
				private long timeStemp
				ctors and getters/setters
			}
			
		2. Create custom exception class
			public class StudentNotFoundException extends RuntimeException {
				ctor(String message){super(message);}
			}
			
		3. Update REST service to throw exception if student not found in the REST controller getStudent method
			if((studentId >= theStudents.size())||theStudents.size()==0){
				throw new StudentNotFoundException("Student id not found :"+ studentId);
			}
		4. Add exception handler method in the Controller using @ExceptionHandler
			-define exception handler method, returns ResponseEntity
			@ExceptionHandler
			public ResponseEntity<StudentErrorResponse> handleException(StudentNotFoundException exc){
				StudentErrorResponse error = new StudentErrorResponse();
				error.setStatus(HttpStatus.NOT_FOUND.value());
				error.setMessage(exc.getMessage());
				error.setTimeStamp(System.currentTimeMillis());
				
				//jackson will convert response entity to JSON 
				return new ResponseEntity<>(error, HttpStatus.NOT_FOUND):
			}
		5. Add exception handler for generic exceptions
			public ResponseEntity<StudentErrorResponse> handleException(Exception exc){
				// same thing as 4.
			}
		6. Use @ControllerAdvice to generalize exception handling methods to all controllers
			-for global exception handling, AOP based 
			-annotation directly helps class to be integrated into system
			1. Create new @ControllerAdvice
			2. Refactor REST service, remove exception hadnling code
			3. Add exception handling code to @ControllerAdvice class 
			
API design best practices
	1. Review API requirements
		ex: create REST API for CRM system 
		Full CRUD support:
			-get list of customers
			-get single customer by id
			-add new customer
			-update/delete a customer
			
	2. Identify main resource/entity
		look for most prominent "noun"
			ex: "Customer"
			/api/customers 
	
	3. Use HTTP methods to assign action on resource 
		C:Post
			/api/customers
		R:Get
			/api/customers
			/api/customers/{customerId} //read a single customer 
		U:Put 
			/api/customers
		D:Delete 
			/api/customers/{customerId} //delete a single customer 
		Don't include actions in the endpoint	
			ex: /api/customersList , /api/deleteCustomer
			-instead use HTTP methods to assign actions
	Examples of real time projects
		Paypal: invoicing API 
			create/list invoices: post/get /v1/invoicing/invoices
			
		Github: Repositories API 
			POST /users/repos : create new repository 
			GET /user/repos

CRUD based real-time projects
	@RestController
	@RequestMapping("/api")
	public class CustomerRestController{
		//autowire CustomerService
		@Autowired
		private CustomerService customerService;
		
		//add mapping for GET/customers
		@GetMapping("/customers")
		public List<Customer> getCustomers(){
			return customerService.getCustomers();
		}
		
	}
	
	Add Customer using POST 
	REST client -> POST/api/customers -JSON-> Customer REST Controller
	Jackson converts request body from JSON to POJO 
	
	@PostMapping("/customers")
	public Customer addCustomer(@RequestBody Customer theCustomer){
		theCustomer.setId(0); //backend DAO use saveOrUpdate(theCustomer) checks primary key, if id = null or 0, insert new customer 
		customerService.saveCustomer(theCustomer);
		return theCustomer;
	}
	-add using Postman:
		send JSON to RestController using POST method to /api/customers 
	Body: 
	{
	"firstName": "Maria",
	"lastName": "Gomez",
	"email":"maria.gomez@luv2code.com"
	}''

	Update Customer using PUT 
	//add new customer, use PUT /customers to update existing customer
	//since customer ID is set at the JSON, DAO will update customer in the Database automatically
	@PutMapping("/customers")
	 public Customer updateCustomer(@RequestBody Customer theCustomer) {
		 customerService.saveCustomer(theCustomer);
		 return theCustomer;
	 }
	 
	 