Fragile base class problem:

  Reuse of code + Subtyping will result in broken results
  public class InstrumentedHashSet<E> extends HashSet<E> }
    private int addCount = 0;

    @Override public boolean add(final E e){
      this.addCount++:
      return super.add(e);
    }

    @Override public boolean addAll(final Collection<? extends E> c){
      this.addCount+= c.size();
      return super.addAll(c);
    }

    public int getAddCount(){
      return this.addCount;
    }

  }
  Broken: addAll() calls add(), addCount will be added twice;

  Reason:
  -provider can't determine whether a change to a base class is safe for
  users by examining in isolation the methods of the base class
  -user can't determine whether extending the base class is safe by reading the API fo the base class

  Solution:
  Favor composition over inheritance
  -allow safe inheritance by adding one level of indirection
  ForwardingSet delegates to HashSet
  InstrumentedHashSet extends ForwardingSet

  public class ForwardingSet<E> implements Set<E>{
    private final Set<E> s;
    public boolean add(E e){return s.add(e);}
    ...
  }
  public InstrumentedHashSet<E> extends ForwardingSet<E>{
    private int addCount=0;
    ...
  }

  Other problem:
    constructor of inheritable class must never call overridable method
    public class SuperClass{
      //Broken! - constructor invokes an overridable method
      public SuperClass(){
        this.overrideMe();
      }
      public void overrideMe(){
        ...
      }
    }
    ex: values initiated in subclass ctor will be null

    Solution:
    public class SuperClass{
      public SuperClass(){
        this.cantOverrideMe();
      }
      public final void cantOverrideMe(){
        ...
      }
    }

    Conclusion: adding one level of indirection solves the Problems
      -encapsulation
      -delegation
      => information hiding


==============================================================================
Some Theory and Practice on Patterns

Idioms: recurring motifs in a program source code
  connote a recognized acknowledge style of programming

Definition:
A pattern is a general reusable solution to a commonly occurring problem within a given context in software development, operation, and maintenance
-The solution must not be particular, can be adapted, must be adapted(Forces, Variants)

Quality:
A means to enhance the reusability:
-of the code written using the Patterns (+its flexibility)
-of the problem and its solution
-a means to encapsulate design experience
-Quality without a name: basically experience increased by practical expertise

Form:
-Books, articles
-Coplien's Form
  -name
  -problem
  -Solution
  -consequences
-UML-like class diagrams

Example:
  Simplified compiler
    -parse files to build and AST, iterate over the AST

----------------------------------------------------------------------------
Naive Implementation: how to generate microcode for
  -Microsoft Windows operating system
  -Intel processor

  Add a generateCode() method in each class

  public class Method{
    public String generateCode(){
      String generatedCode = "";
      final Iterator iterator = this.statements.iterator();
      while(iterator.hasNext()){
        final Statement aStatement = (Statement) iterator.next();
        generatedCode += aStatement.generateCode();
      }
      return generatedCode;
    }
  }

-----------------------------------------------------------------------------
Requirements:
  -decouple the data structure
  -from algorithms on the dataStructure
    -the generateCodeForXXX() method
    solution: visitor design pattern

The Visitor Design Pattern

Motivation: 
	-To have type-checking code mixed with pretty-printing code or flow analysis code 
	-To have each new operation be added separately, node class are independent of the operations that apply to them
	-when an element accepts the visitor, it sends a request to the visitor that encodes the element's class. It also includes the element as an argument.
	-The visitor will then execute the operation for that element

Participants:
	ConcreteVisitors
	AST Node components

Achievements:
	Decouple data structure and algorithms 
	put the traversal in only one place, the AST 
	allow addition of new algorithms without changing the data structure

Conclusion:
	Visitor design pattern useful anywhere having:
	-A (stable) data structure
	-Algorithms on that data structure

-----------------------------------------------------------------------------

Catalogue:
	Design patterns:
    -development and maintenance
    -design/implementation levels
    -examples in C++ and Smalltalk
	
	Categories:
		-Behavioural
		-Creational
		-Structural 

	Examples:
		Abstract Factory: provide an interface for creating families of related or dependent objects without specifying their concrete classes 
		Adapter: convert interface of a class into another one the client expects => compatibility
		Bridge: decouple an abstraction from its implementation so that the two can vary independently 
		Builder: Separate the construction of a complex object from its representation => same construction -> different objects 
		Chain of responsibility: avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request
			-chain receiving objects and pass the request along the chain until an object handles it 
		Command: encapsulate a request as an object, allow parameterize clients with different requests 
		Composite: Compose objects into tree structures to represent part-whole hierarchies
		Decorator: attach different responsibilities to an object dynamically (flexible alternative to subclassing)
		Facade: provide a unified interface to a set of interfaces in a subsystem => easier to use sub interfaces 
		Factory method: interface for creating objects, let subclasses decide which class to instantiate 
		Flyweight: use sharing to support large numbers of fine-grained objects efficiently
		Interpreter: given a langugage, define a representation of its grammar along with a interpreter
		Iterator: access elements of an aggregate objects without exposing object's aggregation
		Mediator: define an objects that encapsulates how a set of objects interacts -> promotes loose coupling (objects don't refer to each other explicitly)
		Memento: without violating encapsulation, capture and externalize an object's internal state to restore the state later 
		Observer: one-to-many dependency between objects, when one changes state, all dependencies are notified and updated automatically
		Prototype: specify the kinds of objects to create using a prototypical instance, create new objects by copying its prototype 
		Proxy: provide a surrogate or placeholder for another object to control access to it 
		Singleton: ensure a class has only one instance 
		State: allow an object to alter its behaviour when its internal state changes (object will appear to change its class)
		Strategy: define a family of algorithms, encapsulate each one and make them interchangeable 
		Template Method: define skeleton of an algorithm in an operation, deferring some steps to subclasses 
		Visitor: represent operation to be performed on the leements of an object structure 

-----------------------------------------------------------------------------

Practice
	Scattered information: informal text 
	
	Access the trade-offs: Flexibility, Complexity