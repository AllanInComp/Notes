SOEN 6441 Final Review

1 Software development models, Predictive and agile models

waterfall model
	move to a phase only when its preceding phase is reviewed and verified, hard to go back
	
Prototyping:early development of prototype software to elicit the problem statement and develop early solutions to get feedback

Iterative and incremental development: structured use of iterations during software development to bring focus on a few development issues at a time. 

Spiral development: risks associated with a particular problem/solution and to minimize risks.

Rapid application development: productivity of software artifacts rather than the strict following of an elaborated process. 

Extreme programming: precepts to be followed in order to achieve productivity while controlling potentially chaotic aspects of software development. 

Predictive model (descriptive model)
	to define all the roles, activities, and artifacts involved in a clearly defined process.   
	difficulty changing direction
	change control board: only most valuable changes are considered 
	accumulates unstable information at all stages
	
Adaptive model (prescriptive models)
	no exact definition of a process, only set of precepts
	software dev = managing change
	minimize risk: short timeboxes (builds), 1-4 weeks
	real time communication instead of written documents
	primary measure of progress: working software
	ripple effect: change in one requirement changes everything beforehand in waterfall model 
		in Adaptive model: lesser magnitude of ripple effect
	benefits: 
		early ROI (return on investment)
		reduces unstable information by focusing on a subset of requirements at a time 
		feedback from clients
		reduced complexity
	disadvantages:
		difficulty incorporating builds into existing struction without degrading quality
		addition of builds must be easy and straighforward
		reorganization of existing structure 
	solutions:
		build plan: define scope, risks, important features & constraints to prevent ad-hoc development
		structural quality control: refactoring
		architectural baseline: control structural quality by providing big picture
		parallel builds
	
Entities:
	Actor: defines a set of skills and responsibilities that are necessary for the achievement of tasks and the production of artifacts in the process. 
	Artifact: defines a product resulting from the achievement of a task, which is then used as input for further tasks in the process. 
	Task: defines a unit of work that aims at producing one or more artifacts, using certain tools and techniques.
	
Rational Unified Process (RUP): iterative development
	Role, Artifact, Activity, Discipline, Workflow
	Components:	
		Disciplines: major areas of concern in software development (ex: management, environment, requirements, implementation, test)
		Phases: plan of action for each discipline, ranging from abstract thinking to concrete development to deployment. (ex: inception, elaboration, construction, transition)
		Iterations: any number of iteration is allowed in each phase in order to reach for the set goals of the phase
	Based on the results of testing the most recent iteration of a design, changes and refinements are made

2 Extreme Programming
	planning
		long term build plan: general goals, can be changed 
		short term build plan: detailed plan
		drawbacks: rough plan is bad
			solution: but small releases enables focus 
		project: build plan for each successive builds, detailed plan for current task
	small release
		working version every week/month
		drawbacks: time is spent to perfect each release
			solution: planning & continuous integration reduces effort, testing reduces defect, simple design allows faster implementation 
		project: each build is small release
	system metaphor
		"story" about the system, provides framework & appropriate features (ex: desktop for UI, spreadsheet for accounting)
		drawback: not enough detail, misleading
			solution: small releases provide feedback, refactoring within practicality
		project: initial project description
	simple design
		smallest number of features that meet requirements of current phase
		drawbacks: faults and omissions, overly simple, components might not integrate correctly
			solution: refactoring prevents omissions, metaphor keeps project on track, pair programming avoid mistakes
		project: determine simplest solution that satisfies requirement
	testing
		fully automated testing process 
		draw back: time spent on testing must be justified
			solution: simple design -> simple testing, pair programming: one tests & other codes, morale boost
	refactoring
		internal code change, no external
		drawback: time
			solution: collective ownership-> easier, coding standards, pair programming, continuous integration
	pair programming
		drawback: inefficient
			solution: coding standards, simpledesign, refactoring, shared metaphor
	collective ownership
		anyone can make changes to any part of the code 
		drawback: caution
			solution: ocntinuous integration prevents large scale code breakdowns, tests, pair programming, coding standards 
	continuous integration
		system is assembled very frequently
		drawbacks; different directions for different programmers 
			solution: tests, refactoring, simple design
		project: frequent commits
	sustainable pace
		no one works over time
		drawback: productivity
			solution: planning, testing 
	on-site customer
		actual user test case
	coding standards 
		coding convention for layout, variable names, file structure, documentation
		
3 Revision control systems
Overview
	why:	
		structured practice that tracks and provides control over changes to files, particularly source code
		rollback sequence in the event that some changes need to be undone
		access previous project versions using version tagging
	goals: 
		automate integration tasks
		providing coordinated changes to software products and components
		recording the composition of versioned software products evolving
	General functioning:
		initial repository -> snapshot of files stored in repo can be retrieved (local copy) -> changes to local copy can be committed -> merge operation can be performed if multiple commits 
	General concepts:
		Repository: storage of the project files and directories
		Working copy, Workspace: copy of a group of files in local
		Commit: saving(or pushing) files to repo
		Checkout: retrieving(or pulling) files from repo
		Branch: collection of revisions that should not be committed onto main trunk (work on a part of code until perfected)
			controlled isolation
	Centralized Repository:
		single server contains all recorded versions
		client can checkout any version remotely
		advantages:
			distributed revisions
		disadvantages:
			single point of failure
		file access concurrency
		examples:
			CVS: Concurrent Versioning System
			Apache Subversion(SVN)
			Perforce
	Distributed Repository:
		A server contains all recorded versions
		Any client can then act as a server
			clients can checkout any version remotely from any server
		advantages:
			no single point of failure
			teamwork with individual initiatives/storage
		examples:
			git
			mercuial
			GNU Bazaar or Darcs
		
Eclipse CVS
	Uses Eclipse IDE
		based on notion of plugin
	To create new CVS repo
		cvs -d fullfoldername init
Tortoise CVS
	Under GNU 
	Integrates with Windows file explorer
		cvs -d fullfoldername init
		must be full folder name
GIT
	open source distributed revision control system 
	git repo is a folder where there is a .git folder used to manage revisions
	git init command to create local git repo
	git add to add files in folder 
	git commit 
	
4 Coding Conventions
	set of prescriptive rules that pertain to how code is to be written
		File organization: how code is distributed between files, and organized within each file. 
		Indentation: how particular syntactical elements are to be indented in order to maximize readability. 
		Comments: how to consistently and efficiently use comments to help program understandability. 
		Declarations:  what particular syntax to use to declare variables, data structures, classes, etc. in order to maximize code readability
		Naming: how to give names to various named entities in a program as to convey meaning embedded into the names
	basic rules to increase code readability/understandability
		clear and consistent layout
			indentation according to nesting level
			blank lines to separate code components 
		descriptive and mnemonic names for files, constants, types, variables, and functions/methods
			generally accepted naming conventions:	
				The length of a name should depend on its scope (global = long, small scope = shorter)
				Constants: all upper case letters, with underscores
				User defined type names or class names start with capital letter
				method names start with lower case, use Upper case to separate words (ex: getScore())
				attributes all lower case, use underscores to separate words (ex: start_time)
				global names are prefixed with project name(ex: MMTstandardDeviation)
			Brown University:	
				file names use lower case charactes only
				types & classes start with the projectname (ex: Project MagicMysteryTour ; Class MMTInterger, MMTUserInterface
			Large Scale C++ softdev
				prefix all attributes with d_ 
			Hungarian notation
				start with small number of lower case letters that identify the type of the variable
				ex: lpszMessage: long pointer string terminated with zero byte
		comments when the meaning of the code by itself is not completely obvious and unambiguous
			eliminate pointless comments
			improve existing code 
				beginning of each file: purpose of file in project
				class declaration: what the class is for
				method: function, parameter description
				variable declaration/class data members: not obvious roles
			in-line comments should be used to highlight & explain important steps of algorithm
			
5 API documentation generation tools
	Goal: make the software more understandable
		Documentation is economically viable (time to write/maintain < time it allows to save by its use)
	Hypertext: efficient browsing through huge documentation
	Automated tools: extract API documentation from code
	
	JavaDoc
		part of Java SDK
		can output in different formats: HTML, RTF, PDF, LaTeX, manpages
		Doxygen is most flexible: generate doc for various programming languages & output in various formats
		Generates browsable HTML, every identifier is a clickable link that leads to its own documentation
		tags: start with @
			@author
			@version Used to create a version entry. A JavaDoc comment may contain at most one @version tag
			@see Used to add a hyperlinked "See Also" entry to the class.
			@param Used to add a parameter description for a method
			{@inheritDoc} Used to copy the description from an overridden method
			{@link reference} Used to link to another documented symbol, or to a URL external to the documentation. 

6 Unit Testing Frameworks
	Goal: avoid software failure caused by fault in code base
	symptom: observable behavior of the system that enables us to observe a failure and possibly find its corresponding fault
	debugging:
		fault identification
		fault correction 
	Unit testing:
		Definition: piece of code written by a developer that exercises a very small, specific area of functionality applied to one of the units of the code being tested
		Benefits:
			facilitates change: allows change or refactoring of code later & makes sure module still works 
			simplifies integration: eliminate uncertainty
			documentation: living documentation of the specifications of the units of the system 
			distributes feedback 
			confidence building
			forces analysis
		Automated testing: supports maintanability, extensibility and efficiency
		Tested Class – the class that is being tested. 
		Tested Method – the method that is tested. 
		Test Case – the testing of a class’s method against some specified conditions.
		Test Case Class – a class performing some test cases.
		Test Case Method – a Test Case Class’s method implementing a test case.
		Test Suite – a collection of test cases that can be tested in a single batch.
		
7 MVC
	part of the basic of the smalltalk programming environment
	Model
		behavior and data of app domain
		responds to requests for info about its state (usually from view)
		responds to instructions to change state (usually from controller)
		notifies observers
	View
		Model => visual, interaction (UI)
		n view => 1 model
			push model: view registers itself with model for change
			pull model: view calls model when it needs to retrieve data 
	Controller
		receives user input
		make calls on appropriate model objects
	Procedure
		Registration:
			1. model objects are created
			2. views register as observers on model objects
			3. controller is bound to a view (reacts to user interaction)
			4. controller is given reference to underlying model (trigger model's behavior on its methods)
		User interacts with view
			1. View recognizes GUI action
			2. View calls method on controller
			3. Controller translates signal to model function
			4. model alteration reflected back to view by notifying observers 

8 Refactoring
	technique for restructuring an existing body of code, change only internal structure
	doesn't fix bugs, but help find bugs
	doesn't add new functionality, but helps further adding of functionality
	essential to agile method
	behavior-preserving transformation
	is Cost overhead to project (add-on activity)
	Pattern:
		encapsulate downcast: moving downcast to within the method 
			return (Reading) readings.lastElement();
		consolidate Conditional Expression: combining same conditional results
		consolidate duplicate conditional fragments: same fragment of code exists in all branches of conditional expression
		rename method: increase readability
		pull up field: moving shared field to superclass
		push down method: moving exclusively relevant classes to subclasses
		
9 Design Patterns
	General:
		Pattern name: name of pattern, increases design vocabulary, allows higher level abstraction
		Problem: specific design problems, list of conditions that must be met before application of pattern
		Solution: elements that make up the design, their relationships, responsibilities and collaborations
		Consequences: trade-offs of applying the pattern
	Creational patterns 
		- create objects for you, rather than having you instantiate objects directly. This gives your program more flexibility in deciding which objects need to be created for a given case.
		Factory Pattern: a decision making class that returns one of several possible subclasses of an abstract base class depending on the data that are provided
			Context: 
				various objects should be used polymorphically, a class can't anticipate kind of objects it must create
			Basic pattern:
				base class is abstract (mostly)
				base class contains default methods and only subclasses when insufficient
				parameters are passed to factory to allow different Concrete subclasses to be made
				subclasses may share same method names with different behaviors
			Abstract Factory Pattern: an interface to create and return one of several families of related objects. 
			Interface: shape
				contains base method void draw();
			Classes implements shape: Circle, Square, Rectangle
				contains @Override public void draw();
			Class ShapeFactory: contains method public static Shape getShape(String type)
				returns Concrete shape classes (C,S,R) depending on string (with if statements)
			Main:
				Shape shape1 = ShapeFactor.getShape("Circle");
				shape1.draw();
		Builder Pattern: separates the construction of a complex object from its representation.
			Context: 
				algorithm for creating a complex object should be independent of the parts that make up the object and how they are assembled
				the object type should be the same, the parts are different
				objects may have different internal behavior and detailed structure, but overall structure and interface should be the same 
			Basic pattern: provides construction abstraction
				builder: an abstract interface for creating parts of a product
				concrete builder: constructs and assembles parts of the product by implementing the builder interface
					independent of each other -> improves modularity 
				director: constructs an object using builder interface
				product: complex object under construction
					should have same attribute types, but will have different values depending on concrete builder
		Prototype Pattern: starts with an initialized and instantiated class and copies or clones it to make new instances rather than creating new instances.
		Singleton Pattern: a class of which there can be no more than one instance. It provides a single global point of access to that instance.
			Context: lazy instantiation technique, not created until the Instance() method is called forthe first itme
			ex: window managers, print spoolers, filesystems
			private static SingleObject instance = new SingleObject(); //static member of the class itself
			private SingleObject(){} //class won't be instantiated
			public static SingleObject getInstance(){return instance;}
			public void method(){}

	Structural patterns 
		- help you compose groups of objects into larger structures, such as complex user interfaces or accounting data.
		Adapter Pattern: a client class to use another class that may provide a service to it, but whose API is incompatible with what the client is expecting. 
			Context:
				convert interface of a class into another interface
				lets classes work together
			Basic pattern:
				Target: defines the domain-specific interface that Client uses.
				Adapter: adapts the interface Adaptee to the Target interface.
					extends Target class to acquire its functions/methods
					contains private Adaptee object
					constructor sets Adaptee as its object
					Target functions called by Adapter will call private Adaptee's corresponding function 
				Adaptee: defines an existing interface that needs adapting.
				Client: collaborates with objects conforming to the Target interface.
			2-way Variation (Class Adapter):
				Both concrete classes implement their own Interface (ex: RoundPeg implements IRoundPeg)
				Adapter implements both Interfaces
				Adapter contains private copies of both classes
		Flyweight pattern: pattern for sharing objects, each instance does not contain its own state, but stores it externally. allows efficient sharing of objects to save space, when there are many instances, but only a few different types.
		
		The Façade pattern: is used to make a single class represent an entire subsystem.

		The Decorator pattern can be used to add features (functions, attributes) to objects dynamically at runtime
			Basic pattern:
				Component: Abstract class representing the objects to be decorated by the various Decorators. 
					public abstract class Coffee{
						public abstract double getCost();
						public abstract String getIngredients();
				Concrete Component: The potentially many sub-classes that can be decorated
					public class Espresso extends Coffee {  
						public double getCost() {
							return 1.25;
						}
						public String getIngredients() {
							return "Strong Coffee";
						}
					}
				Decorator: Abstract class that wraps a Component and will have some of its subclasses to decorate it. 
					extends the abstract Component class
					contains protected final copy of Compoenent class object
					constructor sets Componenet its object 
					@Override methods defines main behaviors (wrapper withthe Componenet interface and delegates its methods to the wrapped Concrete object)
				Concrete Decorator: Different decorators that add different members to the Component.
					extends the abstract Decorator class 
					constructor takes in Concrete Component object as parameter, calls super(object)
					@Override methods defines specifics of the concrete decorator to override default Decorator 
		
	Behavioral patterns 
		- help you define the communication between objects in your system and how the flow is controlled in a complex program.
		Observer pattern: one-to-many 
		Strategy pattern: change the behavior of an object depending on some conditions that are only to be determined at runtime
			1. Define a group of algorithms that applies to a family of classes
			2. Encapsulate each algorithm separately 
			3. Make the algorithms interchangeable within that family
		Basic pattern:
			Context Class: uses a certain behavior that is to be changed during execution. 
				contains a Strategy object and provides a setStrategy() method to change its own strategy. 
				strategy is to be called through a compute() method that will delegate to a concrete strategy method.  
			Strategy Abstract Class: Superclass of all strategies containing the abstract compute() method to be implemented by all its subclasses. 
			Concrete Strategies: Subclasses of Strategy that provide a different implementation for the compute() method.  
10 Exception handling
	Definition: mechanism that allows two separately developed program components to communicate when a program anomaly is encountered during the execution of the program
		error codes: special codes written in case of malfunction and finish execution normally
		creates complexity in simple programs
		Earlist exception handling: LISP then PL/1
	Methods:
		clearly separate code should be provided for abnormal cases
	Exception: data structure that is generated when a special error condition is met 
		contains info about nature and context of this condition
		pocessed by exception handling mechanism that only takes place when Exception is identified
			normal excecution will be taken over by exception handling mechanism
		can terminate or resume program depending on outcome of handling
	try-throw-catch-finally:
		try: code for normal execution of program 
			try-with-resources block: declare an object as a resource managed during try block 
				//declared class must implement java.lang.AutoCloseable interface, will automatically close whether or not try block is successful 
				try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
				  String s = br.readLine();
				}
				
		throw: trigger exeption handing mechanism 
			throw new ExceptionClassName(/*PossiblySomeArguments*/"Some Descriptive String");
			value thrown: argument to throw operator, must be an instance of the Throwable class/subclass
		catch: handles exception	
			only 1 parameter, type determines kind of exception the catch block handles 
			specific to only 1 try block 
			handling goes sequentially over catch block types (branches upon first catch)
			handled locally in one of the following catch blocks
		finally: code executes regardless 	
		
		outcome of try block:
			1. No exception
			2. Exception is thrown in try and caught in catch 
				rest of code in try is skipped
				control is transferred to a following catch block 
				thrown object is passed to catch block 
			3. Exception is thrown in try and no corresponding catch to handle 
				rest of code in try is skipped
				finally block is executed
				function throws exception its calling function, calling function either catches or throws exception itself 
				if main function can't catch, program ends 
	stack unwinding:
		Definition: once catch block takes control, stack unwinding releases all local variables that were used between execution site where exception was thrown 
			physical deallocation of released objects done by garbage collector
		Ex:
			readers and writers are surrounded by try-catch to release the reader or writer class object if there is IO exception 
		An object is only created if its constructor fully resolves. If it successfully calls other constructors before throwing, some resources allocated during the execution of the called constructors will be leaked.  
	handle or declare rule
		Definition: either handle the possible exception inside(with try-catch), or declare exception with throws
		throws clause : public void readFile(String file) throws FileNotFoundException 
			function readFile can only throw exceptions of type FileNotFoundException, will not handle FNF internally
		only applies to checked exceptions 
	Checked and unchecked exceptions:
		checked: not of the RunTimeException type 
			ex: IOException, SQLException, MalformedURLException
	Custom exception classes:
		extends Exception
	Summary:
		exception handling doesn't solve error handling problems, its only a mechanism 
		exception handling doesn't provide a new way of dealing with errors, it only provides formal and explicit way of applying the standard techniques 

11 Java Generics
	Purpose:	
		enables definition of classes and methods implemented independently of some type that they use as an abstraction by accepting type parameter
		To define types and algorithms in different contexts 
	Implementation:
		uses type erasure to translate generic classes into executable code 
			eliminiates all generic type information at compile time 
			all remaining uses of type variables are replaced by the upper bound of the type variable (Object if there is no type bound)
				code at runtime is makes the variables their upper bounds 
				upper bound defined by <T extends Person>
			whenever resulting code isn't type-correct, a cast to the appropriate type is automatically inserted
		Java generics only provide compile-time type safety and eliminate the need for explicit casts when using type-abstract types and algorithms
			java type erasure allows compile to keep track of generic definitions internally
		C++ template on the other hand use template metaprogramming, by which whenever a template is instantiated with a new type parameter, the entire code for the template is generated adapted to the type parameter and then compiled, hence having several definitions for each template instance at run time
	Benefits:
		prevent explicit casting after extraction (invalid explicit casts throw ClassCastException)
			compile can check at compile time whether such casts are valid or not
		Define classes that are valid in different contexts of use.
			Ensure that they are used correctly in each specific context of use.
	parameter type bounds:
		class Pair<A extends Comparable<A> & Cloneable,	B extends Comparable<B> & Cloneable > implements Comparable<Pair<A,B>>, Cloneable { ... }
	wildcards:
		syntactic construct that is used to denote a family of types in a generic class/method instantiation. Wildcards can be unbound or bound
		" ? " : the unbounded wildcard. It stands for the family of all types.
		" ? extends SuperType " : a wildcard with an upper bound. It stands for the family of all types that are SuperType itself or subtypes of SuperType.
		" ? super SubType " : a wildcard with a lower bound. It stands for the family of all types that are SubType itself or supertypes of SubType.