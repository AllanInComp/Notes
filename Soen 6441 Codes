SOEN 6441 Final Codes
=====================================================================================================================================================================================================================================
Builder Pattern

/**
 * Product class of the Builder pattern
 */
public class Shelter {
  /**
   * The components of the shelter to be constructed
   */
  private String roof, structure, floor;

  /**
   * Constructing the roof component
   */
  public void setRoof(String newRoof){
    roof = newRoof;
  }
  /**
   * Constructing the structure component
   */
  public void setStructure(String newStructure){
    structure = newStructure;
  }
  /**
   * Constructing the floor component
   */
  public void setFloor(String newFloor){
    floor = newFloor;
  }
  public String toString(){
    return new String("roof= " + roof + "\nstructure= " + structure + "\nfloor= " + floor + "\n");
  }
}

/**
 * Abstract Builder class of the Builder pattern
 * 
 */
public abstract class ShelterBuilder {
  /**
   * Product to be constructed by the builder
   */
  protected Shelter shelterProduct;
  /**
   * Get the constructed Shelter from the Builder
   */
  public Shelter getShelter(){
    return shelterProduct;
  }
  /**
   * Create a new unspecified Shelter that 
   * will be eventually build by calling the 
   * following abstract methods in a concrete 
   * class derived from the Shelter class
   */
  public void createNewShelter(){
    shelterProduct = new Shelter();
  }
  abstract void buildRoof();
  abstract void buildStructure();
  abstract void buildFloor();
}

public class PolarShelterBuilder extends ShelterBuilder{
  public void buildRoof(){                         // Build the different parts of the Shelter
    shelterProduct.setRoof("ice dome");        
  }                                              
  public void buildStructure(){                    // The construction of the Shelter parts 
    shelterProduct.setStructure("ice blocks");     // depends on the type of Shelter being built
  }
  public void buildFloor(){                        // The construction process in a real-life 
    shelterProduct.setFloor("caribou skin");       // example may be more complex.
  }
}

public class TropicalShelterBuilder extends ShelterBuilder{
  public void buildRoof(){
    shelterProduct.setRoof("palm tree leaves");    // The construction process may vary
  }                                                // across the different Concrete Builders    
  public void buildStructure(){
    shelterProduct.setStructure("bamboo");
  }
  public void buildFloor(){
    shelterProduct.setFloor("goat skin");
  }
}

/**
 * Director of the Builder pattern
 * 
 */
public class Explorer {
  /**
   * The Explorer is to use a specific "build plan": the ShelterBuilder
   */
  private ShelterBuilder builder;

  public void setBuilder(ShelterBuilder newShelterBuilder) {
    builder = newShelterBuilder;
  }
  /**
   * The Director assumes that all Shelters have the same parts
   * and each part is built by calling the same method
   * though what these specific methods do may be different.
   */
  public void constructShelter() {
    builder.createNewShelter();
    builder.buildRoof();
    builder.buildStructure();
    builder.buildFloor();
  }
  /**
   * @return gets the Shelter after it has been built
   */
  public Shelter getShelter() {
    return builder.getShelter();
  }
}

/**
 * Driver class for the Shelter Builder Example
 *
 */
public class Expedition {
  public static void main(String[] args){
    Explorer explorer; 
    Shelter hut, igloo;

    ShelterBuilder tropicalBuilder = new TropicalShelterBuilder();
    ShelterBuilder polarBuilder = new PolarShelterBuilder();

    explorer = new Explorer();

    explorer.setBuilder(tropicalBuilder);
    explorer.constructShelter();
    hut = explorer.getShelter();
    System.out.println(hut);

    explorer.setBuilder(polarBuilder);
    explorer.constructShelter();
    igloo = explorer.getShelter();
    System.out.println(igloo);
  }
}
=====================================================================================================================================================================================================================================
Singleton Pattern

public class SingleObject {
   /** 
    * create an object of SingleObject embedded as a static member of the class itself
    */
   private static SingleObject instance = new SingleObject();
   /** 
    * Make the constructor private so that this class cannot be instantiated
    */
   private SingleObject(){}
   /**
    * If the instance was not previously created, create it. Then return the instance
    */
   public static SingleObject getInstance(){
      if (instance == null)
      instance = new SingleObject();
      return instance;
   }
   public void showMessage(){
      System.out.println("Hello World!");
   }
}


public class SingletonDriver {
   public static void main(String[] args) {

      //Get the only object available
      SingleObject object = SingleObject.getInstance();

      //use the Singleton
      object.showMessage();
   }
}

=====================================================================================================================================================================================================================================
Adapter Pattern 

/**
* The SquarePeg class. This is the Target class.
*/
public class SquarePeg {
  /**
   * This is the interface that the client class knows about Pegs  
   */    
  public void insert(String str) {
    System.out.println("SquarePeg insert(): " + str);
  }
}

/**
* The RoundPeg class. This is the Adaptee class.
*/
public class RoundPeg {
  /**
   * The client does not know this interface, though
   * it provides the service that the client wants.  
   */
  public void insertIntoHole(String msg) {
    System.out.println("RoundPeg insertIntoHole(): " + msg);
  }
}

/**
* The SquareToRoundPegAdapter class. This is the Adapter class.
* It adapts a SquarePeg to a RoundPeg. Its interface is that of a SquarePeg.
*/
public class SquareToRoundPegAdapter extends SquarePeg {
  /**
   * The adapter contains the RoundPeg Adaptee
   */
  private RoundPeg roundPeg; 
  /**
   * Upon creation, the Adapter is plugged into the RoundPeg Adaptee
   */
  public SquareToRoundPegAdapter(RoundPeg peg) {
    //the roundPeg is plugged into the adapter
    this.roundPeg = peg;}
  /**
   * The Adapter provides the Target's method and translates it
   * to the corresponding Adaptee's method call.  
   */
  public void insert(String str) {
    //the roundPeg can now be inserted in the same manner as a squarePeg!
    roundPeg.insertIntoHole(str);}
}

/** 
 * Driver program using the Peg Adapter
 */
public class AdapterDriver{
  public static void main(String args[]) {

    // Create some pegs.
    RoundPeg roundPeg = new RoundPeg();
    SquarePeg squarePeg = new SquarePeg();

    // Do an insert using the square peg (standard).
    squarePeg.insert("I am a SquarePeg in a square hole.");

    // Now we'd like to do an insert using the round peg.
    // But this client only understands the insert()
    // method of pegs, not a insertIntoHole() method.
    // The solution: create an adapter that adapts
    // a square peg to a round peg!

    SquarePeg wannabeRound = new SquareToRoundPegAdapter(roundPeg);
    wannabeRound.insert("I am a SquarePeg in a round hole!");}
}

==========================================================================================================================================================================================================
Adapter Pattern two-way (Class Adapter)

/**
* The IRoundPeg interface.
*/
public interface IRoundPeg {
  public void insertIntoHole(String msg);
}

/**
 * The RoundPeg Target/Adaptee class.
 */
public class RoundPeg implements IRoundPeg {
  public void insertIntoHole(String msg) {
    System.out.println("RoundPeg insertIntoHole(): " + msg);}
}

/**
* The ISquarePeg interface.
*/
public interface ISquarePeg {
  public void insert(String str);
}

/** 
 * The SquarePeg Target/Adaptee class.
 */
public class SquarePeg implements ISquarePeg {
  public void insert(String str) {
    System.out.println("SquarePeg insert(): " + str);}
}


/**
* The PegAdapter class. This is a two-way adapter class.
*/
public class PegAdapter implements ISquarePeg, IRoundPeg {
  private RoundPeg roundPeg;
  private SquarePeg squarePeg;

  public PegAdapter(RoundPeg peg) {
    this.roundPeg = peg;}
  public PegAdapter(SquarePeg peg) {
    this.squarePeg = peg;}

  public void insert(String str) {
    roundPeg.insertIntoHole(str);}
  public void insertIntoHole(String msg){
    squarePeg.insert(msg);}
}

/**
 * Driver class for two way Peg Adapter.
 */
public class TwoWayAdapterDriver {
  public static void main(String args[]) {

    // Create some pegs.
    RoundPeg roundPeg = new RoundPeg();
    SquarePeg squarePeg = new SquarePeg();

    // Do an insert using the square peg.
    squarePeg.insert("I am a SquarePeg into a square hole.");

    // Create a two-way adapter and do an insert with it.
    ISquarePeg wannabeRound = new PegAdapter(roundPeg);
    wannabeRound.insert("I am a SquarePeg into a round hole!");

    // Do an insert using the round peg.
    roundPeg.insertIntoHole("I am a RoundPeg into a round hole.");

    // Create a two-way adapter and do an insert with it.
    IRoundPeg wannabeSquare = new PegAdapter(squarePeg);
    wannabeSquare.insertIntoHole("I am a RoundPeg into a square hole!");}
}
==========================================================================================================================================================================================================
Decorator class

/** 
 * The abstract Coffee class defines the functionality of any Coffee 
 * implemented by subclasses of Coffee
 */
public abstract class Coffee {
    public abstract double getCost(); 
    public abstract String getIngredients(); 
}

/** 
 * Kind of Coffee
 */
public class Espresso extends Coffee {  
    public double getCost() {
        return 1.25;
    }
 
    public String getIngredients() {
        return "Strong Coffee";
    }
}

/** 
 * Kind of Coffee
 */
public class SimpleCoffee extends Coffee {
    public double getCost() {
        return 1;
    }
 
    public String getIngredients() {
        return "Coffee";
    }
}

/** 
 * Abstract decorator class - note that it extends the Coffee abstract class
 */
public abstract class CoffeeDecorator extends Coffee {
    protected final Coffee decoratedCoffee;
    /**
     * Wraps a Coffee object inside an object of one of 
     * CoffeeDecorator's subclasses
     */
    public CoffeeDecorator (Coffee decoratedCoffee) {
        this.decoratedCoffee = decoratedCoffee;
    }
    /**
     * Provides the wrapper with the Coffee interface and delegates 
     * its methods to the wrapped Coffee object. 
     */
    public double getCost() { 
        return decoratedCoffee.getCost();
    }
    public String getIngredients() {
        return decoratedCoffee.getIngredients();
    }
}

/** Decorator that mixes Milk with coffee.
 *  It is a subclass of CoffeeDecorator, and thus a subclass of Coffee. 
 */
class Milk extends CoffeeDecorator {
/**
 * When creating a decorated Coffee, pass a Coffee to be decorated
 * as a parameter. Note that this can be an already-decorated Coffee.
 */
    public Milk (Coffee decoratedCoffee) {
        super(decoratedCoffee);
    }
    /**
     * Overriding methods defined in the abstract superclass. 
     * Enables to provide different behavior for decorated Coffee methods
     */
    public double getCost() { 
        return super.getCost() + 0.5;
    }
    public String getIngredients() {
        return super.getIngredients() + ", Milk";
    }
    /**
     * May also add additional members for decorated-specific data 
     * or behavior
     */
}

class Sprinkles extends CoffeeDecorator {
  public Sprinkles (Coffee decoratedCoffee) {
    super(decoratedCoffee);
  }
  public double getCost() {
    return super.getCost() + 0.2;
  }
  public String getIngredients() {
    return super.getIngredients() + ", Sprinkles";
  }
}

class Whip extends CoffeeDecorator {
  public Whip (Coffee decoratedCoffee) {
    super(decoratedCoffee);
  }
  public double getCost() {
    return super.getCost() + 0.7;
  }
  public String getIngredients() {
    return super.getIngredients() + ", Whip";
  }
}

public class DecoratorDriver {
  public static final void main(String[] args) {
    Coffee c = new SimpleCoffee();
    System.out.println("Cost: " + c.getCost() + "; Ingredients: " + c.getIngredients());
 
    c = new Milk(c);
    System.out.println("Cost: " + c.getCost() + "; Ingredients: " + c.getIngredients());
 
    c = new Sprinkles(c);
    System.out.println("Cost: " + c.getCost() + "; Ingredients: " + c.getIngredients());
 
    c = new Whip(c);
    System.out.println("Cost: " + c.getCost() + "; Ingredients: " + c.getIngredients());
 
    // Note that you can also stack more than one decorator of the same type
    c = new Sprinkles(c);
    System.out.println("Cost: " + c.getCost() + "; Ingredients: " + c.getIngredients());

    c = new Espresso();
    System.out.println("Cost: " + c.getCost() + "; Ingredients: " + c.getIngredients());
 
    c = new Milk(c);
    System.out.println("Cost: " + c.getCost() + "; Ingredients: " + c.getIngredients());
  }
}

Output:
Cost: 1.0; Ingredients: Coffee
Cost: 1.5; Ingredients: Coffee, Milk
Cost: 1.7; Ingredients: Coffee, Milk, Sprinkles
Cost: 2.4; Ingredients: Coffee, Milk, Sprinkles, Whip
Cost: 2.6; Ingredients: Coffee, Milk, Sprinkles, Whip, Sprinkles
Cost: 1.25; Ingredients: Strong Coffee
Cost: 1.75; Ingredients: Strong Coffee, Milk

==========================================================================================================================================================================================================
Strategy Pattern

/** Class configured with a ConcreteStrategy object and maintains
*   a reference to a Strategy object. Depending on which strategy is 
*   plugged in, it will execute a different operation.  
*/
class Calculator {
    private Strategy strategy;
 
    /**
     * Plugs in a specific strategy to be used 
     */
    public void setStrategy(Strategy strategy) {
        this.strategy = strategy;
    }
    
    /**
     * Method that executes a different strategy depending on what strategy was 
     * plugged in upon instantiation. 
     */
    public int executeStrategy(int a, int b) {
        return this.strategy.execute(a, b);
    }

/** 
 * The classes that implement a concrete strategy should implement this.
 * The Calculator class uses this to use a concrete strategy. 
 */
interface Strategy {
/**
 * Method whose implementation varies depending on the strategy adopted. 
 */
    int execute(int a, int b); 
}

/**
 * A concrete Strategy that implements a addition operation
 */
class Add implements Strategy {
    public int execute(int a, int b) {
        System.out.println("Called Add's execute()");
        return a + b;  // Do an addition with a and b
    }
}

/**
 * A concrete Strategy that implements a subtraction operation
 */
class Subtract implements Strategy {
    public int execute(int a, int b) {
        System.out.println("Called Subtract's execute()");
        return a - b;  // Do a subtraction with a and b
    }
}
 
/**
 * A concrete Strategy that implements a multiplication operation
 */
class Multiply implements Strategy {
    public int execute(int a, int b) {
        System.out.println("Called Multiply's execute()");
        return a * b;   // Do a multiplication with a and b
    }    
}

/** 
 * Driver class to test the Strategy pattern 
 */
class StrategyExample {
    public static void main(String[] args) {
        Calculator calculator = new Calculator();
        
        // Three contexts following different strategies
        calculator.setStrategy(new Add());
        int resultA = calculator.executeStrategy(3,4);
        System.out.println("Result A : " + resultA );

        calculator.setStrategy(new Subtract());
        int resultB = calculator.executeStrategy(3,4);
        System.out.println("Result B : " + resultB );

        calculator.setStrategy(new Multiply());
        int resultC = calculator.executeStrategy(3,4);
        System.out.println("Result C : " + resultC );
    }
}

==========================================================================================================================================================================================================
Stack unwinding

public class DummyProcessor {
  private Dummy pd;

  public DummyProcessor(Dummy d) {
    pd = d;
  }

  public void write() throws IOException {
    System.out.println("Entering Function write");
    // if anything fails below, localBDummy would be released 
    // for the garbage collector to process
    Dummy localBDummy = new Dummy("Local write() Dummy");
    BufferedWriter file = new BufferedWriter(new FileWriter(
                          “src/DummyOutput.txt"));
    file.write(pd.dummyName + ", " + pd.age);
    // file is never closed if write throws an exception!
    // solution is to catch here, or else a resource is leaked
    file.close();
    System.out.println("Exiting Function write");
  }

  public void askUser() throws IOException {
    System.out.println("Entering Function askUser");
    // if anything fails below, localCDummy would be released 
    // for the garbage collector to process
    Dummy localCDummy = new Dummy("Local changeName() Dummy");
    Scanner keyboard = new Scanner(System.in);
    System.out.println("Enter the age of the Dummy: ");
    pd.age = keyboard.nextInt();
    this.write();
    // Scanner is never closed if write throws an exception!
    // solution is to catch here, or else a resource is leaked
    keyboard.close();
    System.out.println("Exiting Function askUser");
  }
} 
 
 public class Dummy {
  public String dummyName;
  public int age;
  Dummy(String s) {
    dummyName = s;
    System.out.println("Created Dummy: " + dummyName);
  }

  public void changeName() throws IOException {
    System.out.println("Entering Function changeName"); 
    // if anything fails below, localCDummy would be 
    // released for the garbage collector to process
    Dummy localCDummy = new Dummy("Local read() Dummy");
    BufferedReader file = new BufferedReader(new FileReader(
                          “src/DummyInput.txt"));
    pd.dummyName = pd.dummyName + " " + file.readLine();
    this.askUser();
    // BufferedReader and FileReader are never closed if 
    // write throws an exception! Solution is to catch here,
    // or else a resource is leaked
    file.close();
    System.out.println("Exiting Function changeName");
  }
}


public class StackUnwindingDemo {
  public static void main(String[] args) {
    System.out.println("Entering main");
    Dummy d = null;
    DummyProcessor dp = null;
    try {
      d = new Dummy("Buster");
      dp = new DummyProcessor(d);
      dp.changeName();
    } catch (Exception e) {
      System.out.println("Caught an exception");
    }
    System.out.println("Changed name of dummy: "+pd.dummyName);
    System.out.println("Exiting main.");
  }
}

==========================================================================================================================================================================================================
Java Generics before erasure

/**
 * Generic class that defines a wrapper class around a single 
 * element of a generic type. 
 */
public class Box<T extends Number> {

    private T t;          

    public void set(T t) {
        this.t = t;
    }

    public T get() {
        return t;
    }
/**
 * Generic method that uses both the generic type of the class
 * it belongs to, as well as an additional generic type that is
 * bound to the Number type. 
 */
    public void inspect(){
        System.out.println("T: " + t.getClass().getName());
    }
    
    public <U> void inspectWithAdditionalType(U u){
        System.out.println("T: " + t.getClass().getName());
        System.out.println("U: " + u.getClass().getName());
    } 
    
    public static void main(String[] args) {
        Box<Integer> integerBox = new Box<Integer>();
        integerBox.set(new Integer(10));
        integerBox.inspect();
        integerBox.inspectWithAdditionalType("Hello world");
        Integer i = integerBox.get();
    }
}

==========after type erasure=========
/**
 * Generic class that defines a wrapper class around a single 
 * element of a generic type. 
 */
public class Box {

    private Number t;          

    public void set(Number t) {
        this.t = t;
    }

    public Number get() {
        return t;
    }
/**
 * Generic method that uses both the generic type of the class
 * it belongs to, as well as an additional generic type that is
 * bound to the Number type. 
 *  
 */
    public void inspect(){
        System.out.println("T: " + t.getClass().getName());
    }
    
    public void inspectWithAdditionalType(Object u){ //if no bound is specified, Object is used
        System.out.println("T: " + t.getClass().getName());
        System.out.println("U: " + u.getClass().getName());
    } 
    
    public static void main(String[] args) {
        Box integerBox = new Box<Integer>();
        integerBox.set(new Integer(10));
        integerBox.inspect();
        integerBox.inspectWithAdditionalType("Hello world");
        Integer i = (Integer)integerBox.get(); //automatically casted to type used at instantiation
    }
}

==========================================================================================================================================================================================================
Java Generics  functions and wildcards

class PairUtil {
  public static <A extends Number, B extends Number> double add(Pair<A, B> p) {
    return p.getFirst().doubleValue() + p.getSecond().doubleValue();
  }

  public static <A, B> Pair<B, A> swap(Pair<A, B> p) { //type parameters defines return and parameter types 
    A first = p.getFirst(); //local variables in method are declared in terms of the type parameters 
    B second = p.getSecond();
    return new Pair<B, A>(second, first); //Type parameters are used as type arguments in constructor call
  }
}

=============

public void printCollection( Collection<?> c ){   //collection of elements of any type 
  for (Object o : c){ 
    System.out.println(o); 
  } 
}

/**
type of elements in the source List must be a subtype of type of elements in the destination List
*/
public static <T> void copy( List<? super T> dest, List<? extends T> src) {   
  for (int i=0; i<src.size(); i++) 
    dest.set(i,src.get(i)); 
  } 
}

==========================================================================================================================================================================================================
Java Generics instantiation vs type parameter 

Basket b = new Basket();                    // OK but using raw type!
Basket b1 = new Basket<Fruit>();            // OK but using raw type!
Basket<Fruit> b2 = new Basket<Fruit>();     // OK !

// Type mismatch: cannot convert from Basket<Fruit> to Basket<Apple>
Basket<Apple> b3 = new Basket<Fruit>();     // WRONG !!! 

// Type mismatch: cannot convert from Basket<Apple> to Basket<Fruit>
Basket<Fruit> b4 = new Basket<Apple>();     // WRONG !!!

Basket<?> b5 = new Basket<Apple>();         // OK! 

// 1. Cannot instantiate the type Basket<?>
// 2. Type mismatch: cannot convert from Basket<?> to Basket<Apple>
Basket<Apple> b6 = new Basket<?>();         // WRONG !!!

class Basket<E> {...}

class Fruit {...}
class Apple extends Fruit {...}
class Orange extends Fruit {...}

==========================================================================================================================================================================================================
Java Generics Pair

/**
 *  Immutable generic pair class
 */
public class Pair<TypeOfFirst, TypeOfSecond>{
    private TypeOfFirst first;
    private TypeOfSecond second;

    public Pair(){}

    public Pair(TypeOfFirst first, TypeOfSecond second){
        this.first = first;
        this.second = second;
    }

    public Pair(Pair<TypeOfFirst, TypeOfSecond> newPair){
        this.first = newPair.getFirst();
        this.second = newPair.getSecond();
    }

    public String conc(Pair newpair){
        return (String)newpair.getFirst()+String.valueOf(newpair.getSecond());
    }

    public TypeOfFirst getFirst() {
        return this.first;
    }

    public TypeOfSecond getSecond() {
        return this.second;
    }

    public String toString(){
        return   first.getClass().getName()  + ":" + first.toString() + " , "
                + second.getClass().getName() + ":" + second.toString();
    }

}

import java.util.ArrayList;

public class PairDriver {

    public static void main(String[] args) {
        Pair<String, Integer> p1 = new Pair<String, Integer>("Hello", 1);
        System.out.println(p1);

        ArrayList<Integer> v1 = new ArrayList<Integer>();
        for (int x = 1; x <= 3; x++)
            v1.add(new Integer(x));

        ArrayList<String> v2 = new ArrayList<String>();
        v2.add(new String("un"));
        v2.add(new String("deux"));
        v2.add(new String("trois"));


        ArrayList<Pair<Integer, String>> v3 = new ArrayList<Pair<Integer, String>>();
        for (int x = 0; x <= 2; x++)
            v3.add(new Pair<Integer, String>(v1.get(x), v2.get(x)));

        for (Pair<Integer, String> p : v3)
            System.out.println(p);

        System.out.println(p1.conc(v3.get(0)));

    }
}

public class ComparablePair<TypeOfFirst extends Comparable<TypeOfFirst>, TypeOfSecond extends Comparable<TypeOfSecond>>
  implements Comparable<ComparablePair<TypeOfFirst, TypeOfSecond>> {

  private TypeOfFirst first;
  private TypeOfSecond second;

  public ComparablePair() {}

  public ComparablePair(TypeOfFirst first, TypeOfSecond second) {
    this.first = first;
    this.second = second;
  }

  public ComparablePair(ComparablePair<TypeOfFirst, TypeOfSecond> newComparablePair) {
    this.first = newComparablePair.getFirst();
    this.second = newComparablePair.getSecond();
  }

  public String toString() {
    return first.getClass().getName() + ":" + first.toString() + " , "
           + second.getClass().getName() + ":" + second.toString();
  }

  public TypeOfFirst getFirst() { return this.first; }

  public TypeOfSecond getSecond() { return this.second; }

  public int compareTo(ComparablePair<TypeOfFirst, TypeOfSecond> otherComparablePair) {
    int compareFirst = first.compareTo(otherComparablePair.getFirst());
    int compareSecond = second.compareTo(otherComparablePair.getSecond());
    if (compareFirst != 0) {
      return compareFirst;
    } else {
      return compareSecond;
    }
  }
}

public class ComparablePairDriver {

  public static void main(String[] args) {
    ArrayList<ComparablePair<Integer, String>> alcp = new ArrayList<ComparablePair<Integer, String>>();
    alcp.add(new ComparablePair<Integer, String>(3,"trois"));
    alcp.add(new ComparablePair<Integer, String>(4,"quatre"));
    alcp.add(new ComparablePair<Integer, String>(1,"un"));
    alcp.add(new ComparablePair<Integer, String>(1,"one"));
    alcp.add(new ComparablePair<Integer, String>(1,"one"));

    ComparablePair<Integer, String> previousalcp = null; 
    for (ComparablePair<Integer, String> p : alcp) {
      System.out.println(p);
      if (previousalcp != null) System.out.println(p.compareTo(previousalcp));
      previousalcp = new ComparablePair<Integer, String>(p); 
    }
  }
}

